<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="/stylesheets/q.css">
    <link rel="shortcut icon" href="images/m.jpg" type="image/x-icon">
    <%- include('../cdn/icon.ejs') -%>
    <%- include('../cdn/bootejs.ejs') -%>
    <title>Music Game</title>
 
</head>
<body>
    <div class="container">
        <header class="d-flex flex-wrap justify-content-center py-3 mb-4">
          <a
            href="/"
            class="d-flex align-items-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none"
          >
            <svg class="bi me-2" width="40" height="32">
              <use xlink:href="#bootstrap"></use>
            </svg>
            <img src="/images/logo1.png" width="55px" alt="logo" />
            <span class="fs-4 text-light">Music Life</span>
          </a>
  
          <ul class="nav nav-pills">
            <li class="nav-item">
              <a href="/" class="nav-link text-light" aria-current="page"><i class="bi bi-house"></i> Home</a>
            </li>
            <li class="nav-item">
              <a href="/quiz" class="nav-link text-light"><i class="bi bi-book"></i> Quiz</a>
            </li>
            <li class="nav-item">
              <a href="/game" class="nav-link text-light"><i class="bi bi-controller game-icon"></i>
                Game</a>
            </li>
            <li class="nav-item">
              <a href="/Music" class="nav-link text-light"><i class="bi bi-music-note-beamed"></i> Music</a>
            </li>
            <li class="nav-item">
              <a href="/about" class="nav-link text-light"><i class="bi bi-info-circle"></i> About</a>
            </li>
            <li class="nav-item">
              <a href="/myProfile" class="nav-link text-light"><i class="bi bi-person"></i> My Profile</a>
            </li>
          </ul>
        </header>
      </div>

    <div id="gameContainer">
        <canvas id="gameBoard" width="500" height="500"></canvas>
        <div id="scoreText">Score: 0</div>
        <button id="resetBtn">Reset Game</button>
    </div>
    <%- include('../cdn/js.ejs') -%>
    <script>
const gameBoard = document.querySelector("#gameBoard");
const ctx = gameBoard.getContext("2d");

const scoreText = document.querySelector("#scoreText");
const resetBtn = document.querySelector("#resetBtn");
const gameWidth = gameBoard.width;
const gameHeight = gameBoard.height;

const boardBackground = "lightblue";
const unitSize = 25;
let running = false;
let xVelocity = unitSize;
let yVelocity = 0;
let foodX;
let foodY;
let score = 0;
let snake = [
    { x: unitSize * 4, y: 0 },
    { x: unitSize * 3, y: 0 },
    { x: unitSize * 2, y: 0 },
    { x: unitSize, y: 0 },
    { x: 0, y: 0 }
];

// Load images
const snakeImages = [
    '/images/1975.png', 
    '/images/cas1.png', 
    '/images/mat.jpg',
    '/images/1D.png',
    '/images/w2e.png',
    '/images/taylor.png'
];

const foodItems = [
    { image: '/images/cas1.png', sound: new Audio('/music/apo.mp3') },
    { image: '/images/1975.png', sound: new Audio('/music/aboutyou.mp3') },
    { image: '/images/mat.jpg', sound: new Audio('/music/die.mp3') },
    { image: '/images/1D.png', sound: new Audio('/music/18.mp3') },
    { image: '/images/w2e.png', sound: new Audio('/music/daisy.mp3') },
    { image: '/images/taylor.png', sound: new Audio('/music/alltoowell.mp3') }
];

// Randomly select a snake image and food item
let snakeImage = new Image();
let currentFoodItem = {};
let currentSound = null; // Track the currently playing sound

function selectRandomImages() {
    snakeImage.src = snakeImages[Math.floor(Math.random() * snakeImages.length)];
    // Select a random food item with both image and sound
    currentFoodItem = foodItems[Math.floor(Math.random() * foodItems.length)];
}

window.addEventListener("keydown", changeDirection);
resetBtn.addEventListener("click", resetGame);

gameStart();

function gameStart() {
    running = true;
    score = 0;
    scoreText.textContent = "Score: " + score;
    selectRandomImages(); // Select random images for snake and food
    createFood();
    nextTick();
    document.getElementById('gameBoard').scrollIntoView({ behavior: 'smooth', block: 'start' });

}

function nextTick() {
    if (running) {
        setTimeout(() => {
            clearBoard();
            drawFood();
            moveSnake();
            drawSnake();
            checkGameOver();
            nextTick();
        }, 75);
    } else {
        displayGameOver();
    }
}

function clearBoard() {
    ctx.fillStyle = boardBackground;
    ctx.fillRect(0, 0, gameWidth, gameHeight);
}

function createFood() {
    function randomFood(min, max) {
        const randNum = Math.round((Math.random() * (max - min) + min) / unitSize) * unitSize;
        return randNum;
    }
    foodX = randomFood(0, gameWidth - unitSize);
    foodY = randomFood(0, gameHeight - unitSize);
}

function drawFood() {
    const foodImage = new Image();
    foodImage.src = currentFoodItem.image; // Use the selected food item's image
    ctx.drawImage(foodImage, foodX, foodY, unitSize, unitSize); // Draw food image
}

function moveSnake() {
    const head = { x: snake[0].x + xVelocity, y: snake[0].y + yVelocity };

    // Check if snake head is on the food
    if (head.x === foodX && head.y === foodY) {
        score += 1;
        scoreText.textContent = "Score: " + score;

        // Stop and reset the currently playing sound, if any
        if (currentSound) {
            currentSound.pause();
            currentSound.currentTime = 0; // Reset to start
        }

        // Set and play the new eating sound
        currentSound = currentFoodItem.sound;
        currentSound.play();
        
        // Update snake image to match the food image
        snakeImage.src = currentFoodItem.image;

        createFood();
        selectRandomImages(); // Select new images after eating
    } else {
        snake.pop(); // Remove the last part of the snake if not eating
    }

    snake.unshift(head); // Add the new head
}

function drawSnake() {
    snake.forEach(snakePart => {
        ctx.drawImage(snakeImage, snakePart.x, snakePart.y, unitSize, unitSize); // Draw snake image
    });
}

function changeDirection(event) {
    const keyPressed = event.keyCode;

    if (keyPressed === 37 && xVelocity === 0) {
        xVelocity = -unitSize;
        yVelocity = 0;
    }
    if (keyPressed === 38 && yVelocity === 0) {
        xVelocity = 0;
        yVelocity = -unitSize;
    }
    if (keyPressed === 39 && xVelocity === 0) {
        xVelocity = unitSize;
        yVelocity = 0;
    }
    if (keyPressed === 40 && yVelocity === 0) {
        xVelocity = 0;
        yVelocity = unitSize;
    }
    event.preventDefault();

}

function checkGameOver() {
    if (
        snake[0].x < 0 || 
        snake[0].x >= gameWidth || 
        snake[0].y < 0 || 
        snake[0].y >= gameHeight || 
        snake.slice(1).some(segment => segment.x === snake[0].x && segment.y === snake[0].y)
    ) {
        running = false;
    }
}

function displayGameOver() {
    ctx.fillStyle = "black";
    ctx.font = "50px Arial";
    ctx.fillText("Game Over", gameWidth / 4, gameHeight / 2);
}

function resetGame() {
    // Stop and reset the currently playing sound, if any
    if (currentSound) {
        currentSound.pause();
        currentSound.currentTime = 0; // Reset to start
    }

    score = 0;
    snake = [
        { x: unitSize * 4, y: 0 },
        { x: unitSize * 3, y: 0 },
        { x: unitSize * 2, y: 0 },
        { x: unitSize, y: 0 },
        { x: 0, y: 0 }
    ];
    xVelocity = unitSize;
    yVelocity = 0;
    scoreText.textContent = "Score: " + score;
    currentSound = null; // Reset current sound
    gameStart();
}

    </script>

    
</body>
</html>
